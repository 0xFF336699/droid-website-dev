{"version":3,"file":"static/chunks/6600.5b02b45a40085016.js","mappings":"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","sources":["webpack://_N_E/../../../src/map/BaiduMapView.tsx"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\r\nimport dynamic from 'next/dynamic';\r\nimport { Location, MapProps } from './map.intf';\r\n\r\nconst defaultCenter: Location = { lng: 116.402544, lat: 39.928216 };\r\nconst defaultZoom = 10;\r\nconst defaultWatchOptions = {\r\n  enableHighAccuracy: true,\r\n  timeout: 5000,\r\n  maximumAge: 0\r\n};\r\n\r\nconst MapWithLoader = dynamic<MapProps>(\r\n  () => import('react-bmapgl').then((mod) => {\r\n    const { Map, MapApiLoaderHOC } = mod;\r\n    const MapComponent: React.FC<MapProps> = (props) => {\r\n      const {\r\n        center = defaultCenter,\r\n        zoom = defaultZoom,\r\n        onDeviceLocationUpdate,\r\n        onLocationError,\r\n        watchPosition = false,\r\n        watchOptions = defaultWatchOptions,\r\n        onCenterChange,\r\n        ...restProps\r\n      } = props;\r\n      const mapRef = useRef<any>(null);\r\n      const geolocationRef = useRef<any>(null);\r\n      const [currentCenter, setCurrentCenter] = useState<Location>(center);\r\n      const [hasLocated, setHasLocated] = useState(false);\r\n      useEffect(() => {\r\n        if (!hasLocated && navigator.geolocation) {\r\n          navigator.geolocation.getCurrentPosition(\r\n            (pos) => {\r\n              const location = {\r\n                lng: pos.coords.longitude,\r\n                lat: pos.coords.latitude,\r\n                accuracy: pos.coords.accuracy,\r\n                timestamp: pos.timestamp || Date.now()\r\n              };\r\n              setCurrentCenter(location);\r\n              setHasLocated(true);\r\n              onDeviceLocationUpdate?.(location);\r\n            },\r\n            (err) => {\r\n              setHasLocated(true);\r\n              onLocationError?.(err);\r\n            }\r\n          );\r\n        }\r\n      }, [hasLocated, onDeviceLocationUpdate, onLocationError]);\r\n      useEffect(() => {\r\n        let watchId: number | null = null;\r\n        if (watchPosition && navigator.geolocation) {\r\n          watchId = navigator.geolocation.watchPosition(\r\n            (pos) => {\r\n              const location = {\r\n                lng: pos.coords.longitude,\r\n                lat: pos.coords.latitude,\r\n                accuracy: pos.coords.accuracy,\r\n                timestamp: pos.timestamp || Date.now()\r\n              };\r\n              onDeviceLocationUpdate?.(location);\r\n            },\r\n            (err) => {\r\n              onLocationError?.(err);\r\n            },\r\n            watchOptions\r\n          );\r\n        }\r\n        return () => {\r\n          if (watchId !== null && navigator.geolocation) {\r\n            navigator.geolocation.clearWatch(watchId);\r\n          }\r\n        };\r\n      }, [watchPosition, onDeviceLocationUpdate, onLocationError, watchOptions]);\r\n      const initMap = (map: any) => {\r\n        if (!map) return;\r\n        mapRef.current = map;\r\n        try {\r\n          geolocationRef.current = new BMapGL.Geolocation();\r\n          const realMap = map.map || map.instance;\r\n          if (realMap) {\r\n            if (realMap.enableScrollWheelZoom) realMap.enableScrollWheelZoom(true);\r\n            if (realMap.enableContinuousZoom) realMap.enableContinuousZoom();\r\n            if (realMap.enableInertialDragging) realMap.enableInertialDragging();\r\n          }\r\n          if (onCenterChange) {\r\n            (realMap || map).addEventListener('moveend', () => {\r\n              const c = (realMap || map).getCenter();\r\n              onCenterChange({ lng: c.lng, lat: c.lat });\r\n            });\r\n          }\r\n        } catch (error) {\r\n          onLocationError?.(error);\r\n        }\r\n      };\r\n      return (\r\n        <Map\r\n          ref={initMap}\r\n          style={{ height: '100%', width: '100%', ...restProps.style }}\r\n          center={new BMapGL.Point(currentCenter.lng, currentCenter.lat)}\r\n          zoom={zoom}\r\n          {...restProps}\r\n        />\r\n      );\r\n    };\r\n    return MapApiLoaderHOC({\r\n      ak: 'MmweUMZxcXOThZUaBuQ2rtKwLNHf1Hix'\r\n    })(MapComponent as any) as any;\r\n  }),\r\n  {\r\n    ssr: false,\r\n    loading: () => (\r\n      <div style={{\r\n        height: '100%',\r\n        width: '100%',\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n        backgroundColor: '#f5f5f5',\r\n        color: '#666'\r\n      }}>\r\n        地图加载中...\r\n      </div>\r\n    )\r\n  }\r\n);\r\n\r\nexport const BaiduMapView: React.FC<MapProps> = (props) => {\r\n  return <MapWithLoader {...props} />;\r\n}; "],"names":[],"sourceRoot":"","ignoreList":[]}